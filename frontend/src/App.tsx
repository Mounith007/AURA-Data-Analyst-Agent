import { useState } from \'react\';\r\nimport \'./App.css\';\r\nimport { ThemeProvider } from \'./contexts/ThemeContext\';\r\nimport NavigationBar from \'./components/NavigationBar\';\r\nimport ChatArea from \'./components/ChatArea\';\r\nimport ResultsArea from \'./components/ResultsArea\';\r\nimport TrendAnalysis from \'./components/TrendAnalysis\';\r\nimport ResizableLayout from \'./components/Layout/ResizableLayout\';\r\nimport LeftSidebar from \'./components/LeftSidebar\';\r\nimport GlassBox from \'./components/GlassBox\';\r\nimport BackgroundParticles from \'./components/BackgroundParticles\';\r\nimport type { DataResult } from \'./types\';\r\nimport DatabaseConnection from \'./components/DatabaseConnection\';\r\n\r\nimport type { Message } from \'./components/MessageList\';\r\n\r\nfunction AppContent() {\r\n  const [currentMode, setCurrentMode] = useState<\'chat\' | \'database\' | \'visualization\' | \'strategic\'>(\'chat\');\r\n  const [sqlQuery, setSqlQuery] = useState(\'-- Generated SQL will appear here\');\r\n  const [dataResult, setDataResult] = useState<DataResult | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [pendingApproval, setPendingApproval] = useState(false);\r\n  const [currentJobId, setCurrentJobId] = useState<string | null>(null);\r\n  const [currentPrompt, setCurrentPrompt] = useState<string>(\'\');\r\n\r\n  \r\n  // New dynamic features\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [uploadedData, setUploadedData] = useState<any[] | null>(null);\r\n  const [uploadedFileName, setUploadedFileName] = useState<string>(\'\');\r\n  const [showTrendAnalysis, setShowTrendAnalysis] = useState(false);\r\n  const [showConnectionModal, setShowConnectionModal] = useState(false);\r\n\r\n  // Real connections data - starts empty\r\n  const [connections, setConnections] = useState<any[]>([]);\r\n\r\n  // Dynamic chat system\r\n  const addMessage = (type: \'user\' | \'assistant\' | \'system\', content: string, data?: any) => {\r\n    const newMessage: Message = {\r\n      id: Date.now().toString(),\r\n      type,\r\n      content,\r\n      timestamp: new Date(),\r\n      data\r\n    };\r\n    setMessages(prev => [...prev, newMessage]);\r\n    return newMessage.id;\r\n  };\r\n\r\n  const handleQuickAction = (action: string) => {\r\n    let prompt = \'\';\r\n    switch (action) {\r\n      case \'analyze_trends\':\r\n        prompt = \'Show me sales trends for the last quarter\';\r\n        break;\r\n      case \'create_chart\':\r\n        prompt = \'Create a visualization of my data\';\r\n        break;\r\n      case \'connect_database\':\r\n        setCurrentMode(\'database\');\r\n        return;\r\n      case \'analyze_data\':\r\n        if (uploadedData) {\r\n          setShowTrendAnalysis(true);\r\n        } else {\r\n          prompt = \'Help me analyze my data patterns\';\r\n        }\r\n        break;\r\n      default:\r\n        prompt = action;\r\n    }\r\n    if (prompt) {\r\n      handleQuerySubmit(prompt);\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (file: File, data: any[]) => {\r\n    setUploadedData(data);\r\n    setUploadedFileName(file.name);\r\n    setShowTrendAnalysis(true);\r\n    \r\n    // Add system message about file upload\r\n    addMessage(\'system\', `Successfully uploaded ${file.name} with ${data.length} records`, {\r\n      fileName: file.name,\r\n      recordCount: data.length,\r\n      columns: data.length > 0 ? Object.keys(data[0]) : []\r\n    });\r\n  };\r\n\r\n  const handleConnectionSelect = (connection: any) => {\r\n    addMessage(\'system\', `ðŸ”Œ Connected to: ${connection.name}`);\r\n    console.log(\'Selected connection:\', connection);\r\n  };\r\n\r\n  const handleNewConnection = () => {\r\n    setShowConnectionModal(true);\r\n  };\r\n\r\n  const handleConnect = async (connectionDetails: any) => {\r\n    console.log(\'Connecting with:\', connectionDetails);\r\n    addMessage(\'system\', `Attempting to connect to ${connectionDetails.dbname}...\`);\r\n    try {\r\n      const response = await fetch(\'http://localhost:8007/connect\', {\r\n        method: \'POST\',\r\n        headers: {\r\n          \'Content-Type\': \'application/json\',\r\n        },\r\n        body: JSON.stringify(connectionDetails),\r\n      });\r\n      const result = await response.json();\r\n      if (response.ok && result.status === \'success\') {\r\n        addMessage(\'system\', `Successfully connected to ${connectionDetails.dbname}!`);\r\n        setConnections(prev => [...prev, { ...connectionDetails, id: Date.now().toString() }]);\r\n      } else {\r\n        addMessage(\'system\', `Failed to connect: ${result.detail || \'Unknown error\'}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(\'Error connecting to database:\', error);\r\n      addMessage(\'system\', \'An error occurred while trying to connect to the database.\');\r\n    }\r\n    setShowConnectionModal(false);\r\n  };\r\n\r\n  const handleCloseConnectionModal = () => {\r\n    setShowConnectionModal(false);\r\n  };\r\n\r\n  const handleQuerySubmit = async (prompt: string) => {\r\n    // Add user message\r\n    addMessage(\'user\', prompt);\r\n    \r\n    setIsTyping(true);\r\n    setIsLoading(true);\r\n    setPendingApproval(false);\r\n    setDataResult(null);\r\n    setCurrentPrompt(prompt);\r\n    \r\n    try {\r\n      const response = await fetch(\'http://localhost:8000/generate_query\', {\r\n        method: \'POST\',\r\n        headers: {\r\n          \'Content-Type\': \'application/json\',\r\n        },\r\n        body: JSON.stringify({\r\n          session_id: \'frontend-session\',\r\n          prompt: prompt,\r\n          context: \'Schema: sales_table(product_name, total_revenue, sale_date)\'\r\n        })\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.status === \'Success\') {\r\n        setSqlQuery(result.final_query || \'-- No SQL generated\');\r\n        setCurrentJobId(result.job_id || \'job_\' + Date.now());\r\n        \r\n        // Add assistant response\r\n        addMessage(\'assistant\', \'I\\\'ve analyzed your request and generated a query. Please review it below for approval.\', {\r\n          query: result.final_query,\r\n          jobId: result.job_id\r\n        });\r\n        \r\n        setPendingApproval(true);\r\n      } else {\r\n        setSqlQuery(\'-- Error: \' + (result.error_message || \'Unknown error\'));\r\n        addMessage(\'assistant\', \'I encountered an error while processing your request: \' + (result.error_message || \'Unknown error\'));\r\n        setPendingApproval(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\'Error calling API:\', error);\r\n      setSqlQuery(\'-- Error: Failed to connect to backend\');\r\n      addMessage(\'assistant\', \'Sorry, I\\\'m having trouble connecting to the analysis service. Please try again.\');\r\n      setPendingApproval(false);\r\n    } finally {\r\n      setIsLoading(false);\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  const handleSqlApproval = async (approved: boolean, editedQuery?: string) => {\r\n    if (!currentJobId) return;\r\n    \r\n    setPendingApproval(false);\r\n    \r\n    if (approved) {\r\n      setIsLoading(true);\r\n      try {\r\n        // If user edited the query, update it\r\n        if (editedQuery && editedQuery !== sqlQuery) {\r\n          setSqlQuery(editedQuery);\r\n        }\r\n        \r\n        // Simulate execution with comprehensive mock data\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        // Generate sample data based on the query type\r\n        const sampleData = generateSampleData(currentPrompt);\r\n        setDataResult(sampleData);\r\n      } catch (error) {\r\n        console.error(\'Execution error:\', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    } else {\r\n      setSqlQuery(\'-- Query execution cancelled by user\');\r\n      setDataResult(null);\r\n    }\r\n    \r\n    setCurrentJobId(null);\r\n  };\r\n\r\n\r\n\r\n  const handleModeChange = (mode: \'chat\' | \'database\' | \'visualization\' | \'strategic\') => {\r\n    setCurrentMode(mode);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <BackgroundParticles />\r\n      <NavigationBar currentMode={currentMode} onModeChange={handleModeChange} />\r\n      \r\n      <ResizableLayout\r\n        leftPanel={{\r\n          id: \'sidebar\',\r\n          title: \'Data Sources\',\r\n          content: (\r\n            <LeftSidebar\r\n              connections={connections}\r\n              onConnectionSelect={handleConnectionSelect}\r\n              onNewConnection={handleNewConnection}\r\n              onFileUpload={handleFileUpload}\r\n              isLoading={isLoading}\r\n            />\r\n          ),\r\n          minWidth: 250,\r\n          defaultWidth: 300\r\n        }}\r\n        middleTopPanel={{\r\n          id: \'results\',\r\n          title: \'Query Results\',\r\n          content: (\r\n            <ResultsArea \r\n              sqlQuery={sqlQuery} \r\n              dataResult={dataResult} \r\n              pendingApproval={pendingApproval}\r\n              onApproval={handleSqlApproval}\r\n              isLoading={isLoading}\r\n            />\r\n          ),\r\n          minHeight: 200,\r\n          defaultHeight: 400\r\n        }}\r\n        middleBottomPanel={{\r\n          id: \'glassbox\',\r\n          title: \'Analytics Dashboard\',\r\n          content: (\r\n            <GlassBox title=\"Dynamic Glass Panel\">\r\n              {showTrendAnalysis && uploadedData && (\r\n                <TrendAnalysis \r\n                  data={uploadedData}\r\n                  fileName={uploadedFileName}\r\n                />\r\n              )}\r\n            </GlassBox>\r\n          )\r\n        }}\r\n        rightPanel={{\r\n          id: \'chat\',\r\n          title: \'AI Assistant\',\r\n          content: (\r\n            <ChatArea \r\n              onQuerySubmit={handleQuerySubmit} \r\n              isLoading={isLoading}\r\n              messages={messages}\r\n              isTyping={isTyping}\r\n              onQuickAction={handleQuickAction}\r\n            />\r\n          ),\r\n          minWidth: 300,\r\n          defaultWidth: 400\r\n        }}\r\n      />\r\n      {showConnectionModal && (\r\n        <DatabaseConnection\r\n          onConnect={handleConnect}\r\n          onClose={handleCloseConnectionModal}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Enhanced sample data generation for comprehensive chart demonstrations\r\nfunction generateSampleData(prompt: string): DataResult {\r\n  const promptLower = prompt.toLowerCase();\r\n  \r\n  if (promptLower.includes(\'top\') && promptLower.includes(\'product\')) {\r\n    return {\r\n      columns: [\'product_name\', \'total_revenue\', \'units_sold\', \'profit_margin\'],\r\n      rows: [\r\n        [\'Premium Widget Pro\', 125000, 2500, 35.2],\r\n        [\'Advanced Gadget Plus\', 98000, 1960, 31.8],\r\n        [\'Smart Tool Elite\', 87500, 1750, 28.9],\r\n        [\'Basic Widget Standard\', 65000, 2600, 24.5],\r\n        [\'Compact Gadget Mini\', 54000, 1800, 29.7],\r\n        [\'Universal Tool Kit\', 43000, 860, 38.1],\r\n        [\'Economy Widget Lite\', 32000, 1600, 18.3],\r\n        [\'Portable Gadget Go\', 28000, 1400, 22.6],\r\n        [\'Essential Tool Set\', 21000, 700, 26.4],\r\n        [\'Starter Widget Basic\', 15000, 1000, 15.8],\r\n        [\'Pro Max Edition\', 89000, 1200, 42.1],\r\n        [\'Deluxe Package\', 76000, 950, 33.7]\r\n      ]\r\n    };\r\n  } else if (promptLower.includes(\'revenue\') && (promptLower.includes(\'month\') || promptLower.includes(\'trend\'))) {\r\n    return {\r\n      columns: [\'month\', \'total_revenue\', \'order_count\', \'avg_order_value\'],\r\n      rows: [\r\n        [\'2024-01\', 180000, 1200, 150],\r\n        [\'2024-02\', 195000, 1350, 144],\r\n        [\'2024-03\', 165000, 1100, 150],\r\n        [\'2024-04\', 220000, 1450, 152],\r\n        [\'2024-05\', 235000, 1520, 155],\r\n        [\'2024-06\', 210000, 1380, 152],\r\n        [\'2024-07\', 245000, 1600, 153],\r\n        [\'2024-08\', 230000, 1480, 155],\r\n        [\'2024-09\', 255000, 1650, 155],\r\n        [\'2024-10\', 275000, 1750, 157],\r\n        [\'2024-11\', 290000, 1820, 159],\r\n        [\'2024-12\', 310000, 1900, 163]\r\n      ]\r\n    };\r\n  } else if (promptLower.includes(\'distribution\') || promptLower.includes(\'histogram\')) {\r\n    return {\r\n      columns: [\'value_range\', \'frequency\', \'percentage\'],\r\n      rows: [\r\n        [\'0-10K\', 45, 15.0],\r\n        [\'10K-20K\', 67, 22.3],\r\n        [\'20K-30K\', 89, 29.7],\r\n        [\'30K-40K\', 56, 18.7],\r\n        [\'40K-50K\', 34, 11.3],\r\n        [\'50K-60K\', 23, 7.7],\r\n        [\'60K-70K\', 12, 4.0],\r\n        [\'70K-80K\', 8, 2.7],\r\n        [\'80K-90K\', 5, 1.7],\r\n        [\'90K-100K\', 3, 1.0]\r\n      ]\r\n    };\r\n  } else if (promptLower.includes(\'region\') || promptLower.includes(\'location\')) {\r\n    return {\r\n      columns: [\'region\', \'sales\', \'customers\', \'avg_revenue\'],\r\n      rows: [\r\n        [\'North America\', 450000, 2500, 180],\r\n        [\'Europe\', 380000, 2100, 181],\r\n        [\'Asia Pacific\', 520000, 2800, 186],\r\n        [\'Latin America\', 240000, 1200, 200],\r\n        [\'Middle East\', 180000, 950, 189],\r\n        [\'Africa\', 120000, 600, 200]\r\n      ]\r\n    };\r\n  } else if (promptLower.includes(\'category\') || promptLower.includes(\'segment\')) {\r\n    return {\r\n      columns: [\'category\', \'revenue\', \'market_share\', \'growth_rate\'],\r\n      rows: [\r\n        [\'Electronics\', 1250000, 35.8, 12.5],\r\n        [\'Software\', 980000, 28.1, 18.3],\r\n        [\'Hardware\', 650000, 18.6, 8.7],\r\n        [\'Services\', 420000, 12.0, 22.1],\r\n        [\'Accessories\', 190000, 5.5, 15.2]\r\n      ]\r\n    };\r\n  } else if (promptLower.includes(\'performance\') || promptLower.includes(\'kpi\')) {\r\n    return {\r\n      columns: [\'metric\', \'q1\', \'q2\', \'q3\', \'q4\'],\r\n      rows: [\r\n        [\'Revenue\', 180000, 220000, 245000, 290000],\r\n        [\'Customers\', 1200, 1450, 1600, 1850],\r\n        [\'Orders\', 2400, 2900, 3200, 3700],\r\n        [\'Conversion\', 3.2, 3.8, 4.1, 4.5]\r\n      ]\r\n    };\r\n  } else {\r\n    return {\r\n      columns: [\'product_name\', \'total_revenue\', \'sale_date\', \'category\', \'rating\'],\r\n      rows: [\r\n        [\'Widget A\', 15000, \'2024-01-15\', \'Electronics\', 4.5],\r\n        [\'Gadget B\', 25000, \'2024-01-20\', \'Electronics\', 4.8],\r\n        [\'Tool C\', 8500, \'2024-01-25\', \'Hardware\', 4.2],\r\n        [\'Widget D\', 18000, \'2024-02-01\', \'Electronics\', 4.6],\r\n        [\'Gadget E\', 32000, \'2024-02-05\', \'Electronics\', 4.9],\r\n        [\'Tool F\', 12000, \'2024-02-10\', \'Hardware\', 4.1],\r\n        [\'Premium Kit\', 45000, \'2024-02-15\', \'Premium\', 4.7],\r\n        [\'Smart Device\', 38000, \'2024-02-20\', \'Electronics\', 4.8]\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <ThemeProvider>\r\n      <AppContent />\r\n    </ThemeProvider>\r\n  );\r\n}